/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/z73jkhiZeaN
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"

export function Advert() {
  const [currentIndex, setCurrentIndex] = useState(0)
  const [isAutoPlaying, setIsAutoPlaying] = useState(true)
  const shoes = [
    {
      id: 1,
      image: "/soccer.jpeg",
      alt: "Shoe 1",
    },
    {
      id: 2,
      image: "/soccer.jpeg",
      alt: "Shoe 2",
    },
    {
      id: 3,
      image: "/soccer.jpeg",
      alt: "Shoe 3",
    },
    {
      id: 4,
      image: "/soccer.jpeg",
      alt: "Shoe 4",
    },
    {
      id: 5,
      image: "/soccer.jpeg",
      alt: "Shoe 5",
    },
  ]
  useEffect(() => {
    let interval
    if (isAutoPlaying) {
      interval = setInterval(() => {
        setCurrentIndex((prevIndex) => (prevIndex + 1) % shoes.length)
      }, 5000)
    }
    return () => clearInterval(interval)
  }, [isAutoPlaying, shoes.length])
  const handlePrevious = () => {
    setCurrentIndex((prevIndex) => (prevIndex - 1 + shoes.length) % shoes.length)
    setIsAutoPlaying(false)
  }
  const handleNext = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % shoes.length)
    setIsAutoPlaying(false)
  }
  return (
    <div className="relative w-full max-w-6xl mx-auto">
      <div className="aspect-[16/9] overflow-hidden rounded-lg">
        <div className="flex transition-transform duration-500 ease-in-out">
          {shoes.map((shoe, index) => (
            <div
              key={shoe.id}
              className={`flex-shrink-0 w-full h-full object-cover ${
                index === currentIndex ? "opacity-100" : "opacity-0"
              }`}
            >
              <img
                src={shoe.image}
                alt={shoe.alt}
                width={1600}
                height={900}
                className="w-full h-full object-cover"
              />
            </div>
          ))}
        </div>
      </div>
      <div className="absolute top-1/2 left-4 -translate-y-1/2 z-10">
        <Button variant="outline" size="icon" onClick={handlePrevious} className="rounded-full">
          <ChevronLeftIcon className="w-6 h-6" />
        </Button>
      </div>
      <div className="absolute top-1/2 right-4 -translate-y-1/2 z-10">
        <Button variant="outline" size="icon" onClick={handleNext} className="rounded-full">
          <ChevronRightIcon className="w-6 h-6" />
        </Button>
      </div>
    </div>
  )
}

function ChevronLeftIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m15 18-6-6 6-6" />
    </svg>
  )
}


function ChevronRightIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m9 18 6-6-6-6" />
    </svg>
  )
}
