/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/sLZ8lc0vpBy
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { IBM_Plex_Sans } from 'next/font/google'

ibm_plex_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link"
import { Button } from "./ui/button"
import { prisma } from "@/lib/connect";
import { htmlToText } from "html-to-text";
import { Category, User } from "@prisma/client";

export async function SecondSec() {


  const categories = await prisma.category.findMany({
      orderBy:{
        visitors:"desc"
      }
    });

  const [trendingArticles,newArticles] = await prisma.$transaction([
    prisma.article.findMany({
      where: {
        cat: {
          title: categories[0].title
        },
        isTrending: false
      },
      orderBy: {
        views: 'desc'
      },
      include: {
        author: true,
        cat: true
      },
      take: 7
    }),

    prisma.article.findFirst({
      where: {
        cat: {
          title: categories[0].title
        }
      },
      orderBy: {
        publishDate: 'desc'
      },
      include: {
        author: true,
        cat: true
      },
   
    })
  ]);


  function stripHtml(content:string) {
    return htmlToText(content, {
        selectors: [
            { selector: 'p', format: 'inline' },
            { selector: 'img', format: 'skip' }, // Skip images
            { selector: 'video', format: 'skip' }, // Skip videos
            { selector: 'a', options: { ignoreHref: true } }, // Ignore links
            // Add more selectors as needed
          ],
      });
  }
  

  return (
    <div className="dark:bg-gray-900">
      <main>
      
        <section className="dark:bg-gray-800 py-12 md:py-16">
          <div className="container mx-auto py-4 border-y">
          <div className='text-white bg-blue-500 w-fit py-1 px-5'>{categories[0].title}</div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div>
              <div className="relative overflow-hidden">
                <img
                  src={`${newArticles?.img}`}
                  alt="Featured Article"
                  width={800}
                  height={600}
                  className="w-full h-full object-cover object-center transition-transform duration-500 ease-in-out hover:scale-105"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-gray-900 to-transparent opacity-70" />
                <div className="absolute bottom-0 left-0 right-0 p-6 text-white">
                <Link href={`/view/${newArticles?.id}?cat=${newArticles?.catSlug}`} className="text-2xl md:text-3xl font-bold hover:underline mb-2">{newArticles?.title}</Link>
                  <Link href={`/view/${newArticles?.id}?cat=${newArticles?.catSlug}`} className="text-gray-300 hover:underline line-clamp-2">
                    {stripHtml(newArticles?.content!)}
                  </Link>
                </div>
              </div>
              <div className="space-y-6">
                <div className="dark:bg-gray-800 grid md:grid-cols-2 gap-2 border-y mt-5">
                  {trendingArticles.map(article=>(
                    <div key={article.id} className="flex gap-1 text-sm border-gray-400 py-3">
                      <img src={`${article.img}`} className="h-40 w-40" />
                      <div>
                          <Link href={`/view/${article?.id}?cat=${article?.catSlug}`} className="text-gray-600 hover:underline font-bold dark:text-gray-400 line-clamp-3">
                            {stripHtml(article.content)}
                          </Link>
                        <div className="flex text-gray-600 text-xs gap-2 items-center">
                          <p>{article.authorName}</p>
                          <p>{article.author.role}</p>
                        </div>
                      </div>
                      
                  </div>  
                  ))}
                                 
                </div>
                
              </div>
              </div>
              
              
              <div className="space-y-6">
                <div className="relative dark:bg-gray-800 shadow-lg overflow-hidden transition-transform duration-300 ease-in-out hover:-translate-y-2 hover:shadow-xl">
                  <img
                    src="/soccer.jpeg"
                    alt="Article 2"
                    width={400}
                    height={225}
                    className="w-full h-[25rem] object-cover object-center"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-gray-900 to-transparent opacity-70" />
                  <div className="absolute bottom-0 left-0 right-0 p-6 text-white">
                    <h3 className="bg-[green] font-bold text-white text-xs py-1 px-4 w-fit">Todays sponsors</h3>
                    <h2 className="font-bold my-2">DCTFUSION</h2>
                    <p className="text-gray-300 mb-2 text-xs line-clamp-2">
                      Explore the latest trends and technologies shaping the future of web development.
                      Lorem ipsum dolor sit, amet consectetur adipisicing elit. Repellat quod ea officia deserunt aliquam veritatis ducimus adipisci et iste nisi.
                    </p>
                    <div className="flex justify-center text-xs">
                    <Button className="w-full">Explore</Button>
                    </div>
                  </div>
                </div>
                </div>
            </div>
          </div>
        </section>       
      </main>

    </div>
  )
}




function FacebookIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z" />
    </svg>
  )
}


function InstagramIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="20" height="20" x="2" y="2" rx="5" ry="5" />
      <path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z" />
      <line x1="17.5" x2="17.51" y1="6.5" y2="6.5" />
    </svg>
  )
}


function LinkedinIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" />
      <rect width="4" height="12" x="2" y="9" />
      <circle cx="4" cy="4" r="2" />
    </svg>
  )
}


function MenuIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="4" x2="20" y1="12" y2="12" />
      <line x1="4" x2="20" y1="6" y2="6" />
      <line x1="4" x2="20" y1="18" y2="18" />
    </svg>
  )
}


function TwitterIcon(props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z" />
    </svg>
  )
}
